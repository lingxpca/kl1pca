#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include "type.h"
#include "gsl_math.h"
#include "gsl_eigen.h"
#include <gsl/gsl_blas.h>
 
int pfkpca (ENTITYINFOptr entityinfo, PROBLEMINFOptr probleminfo);  

int pfkpca (ENTITYINFOptr entityinfo, PROBLEMINFOptr probleminfo){
	int i = probleminfo->i;
	int j = probleminfo->j;		
	double **K=entityinfo->K;
	int numattributes_m = entityinfo->numattributes_m; 
	double *data = probleminfo->data;
	 
	for (i=0;i<numattributes_m;++i)
	{			 
		for (j=0;j<numattributes_m;++j) data[i*numattributes_m+j] = K[i][j];
 	}

  gsl_matrix_view m = gsl_matrix_view_array (data, numattributes_m, numattributes_m);
  gsl_vector *eval = gsl_vector_alloc (numattributes_m);
  gsl_matrix *evec = gsl_matrix_alloc (numattributes_m, numattributes_m);
  gsl_matrix *evect = gsl_matrix_alloc (numattributes_m, numattributes_m);

    
  gsl_eigen_symmv_workspace * w = gsl_eigen_symmv_alloc (numattributes_m);
  gsl_eigen_symmv (&m.matrix, eval, evec, w);
  gsl_eigen_symmv_free (w);
  gsl_eigen_symmv_sort (eval, evec,GSL_EIGEN_SORT_ABS_ASC);

  for (i = numattributes_m;i-->0;)
	{
	  double eval_i = gsl_vector_get (eval, i);
	  gsl_vector_view evec_i = gsl_matrix_column (evec, i);
	  printf ("lambda = %g\n", eval_i);
	  printf ("PC%d = \n",numattributes_m-i);
	  gsl_vector_fprintf (stdout,&evec_i.vector,"%8.4g");
	}

  gsl_matrix_transpose_memcpy(evect,evec); 
	 
 

	
  gsl_vector_free (eval);
  gsl_matrix_free (evec);
	fprintf (stdout,"******End of PCA******\n\n");
 	
	
  return 0;
}








































 








